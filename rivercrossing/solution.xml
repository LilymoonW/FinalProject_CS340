<alloy builddate="2021-11-03T15:25:43.736Z">

<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Wolf$0"/>
   <atom label="Goat$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Wolf$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Goat$0"/>
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Wolf$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Goat$0"/>
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Wolf$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Goat$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Wolf$0"/>
   <atom label="Goat$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Goat$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Wolf$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Goat$0"/>
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Wolf$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

</instance>
<instance bitwidth="4" maxseq="7" mintrace="1" maxtrace="10" command="Run run$1 for 7" filename="/Users/audreyshin/FinalProject_CS340/river.als" tracelength="8" backloop="7">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Farmer" ID="4" parentID="5" one="yes">
   <atom label="Farmer$0"/>
</sig>

<sig label="this/Wolf" ID="6" parentID="5" one="yes">
   <atom label="Wolf$0"/>
</sig>

<sig label="this/Goat" ID="7" parentID="5" one="yes">
   <atom label="Goat$0"/>
</sig>

<sig label="this/Cabbage" ID="8" parentID="5" one="yes">
   <atom label="Cabbage$0"/>
</sig>

<sig label="this/Item" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/ThisSide" ID="9" var="yes">
   <type ID="5"/>
</sig>

<sig label="this/OtherSide" ID="10" var="yes">
   <atom label="Farmer$0"/>
   <atom label="Wolf$0"/>
   <atom label="Goat$0"/>
   <atom label="Cabbage$0"/>
   <type ID="5"/>
</sig>

</instance>

<source filename="/Users/audreyshin/FinalProject_CS340/river.als" content="--Variable declarations ---&#x000a;abstract sig Item{}&#x000a;&#x000a;one sig Farmer, Wolf, Goat, Cabbage extends Item{}&#x000a;&#x000a;var sig ThisSide in Item{}&#x000a;var sig OtherSide in Item{}&#x000a;&#x000a;---the initial setup of everything---&#x000a;&#x000a;// We want everything to start on this side&#x000a;pred init(ts: ThisSide, os: OtherSide){&#x000a;&#x0009;no os&#x000a;&#x0009;ts = Item&#x000a;}&#x000a;&#x000a;// want everything to eecntually be on the other side &#x000a;fact eventuallyAllOtherSide{&#x000a;&#x0009;eventually OtherSide = Item&#x000a;}&#x000a;&#x000a;&#x000a;//do nothing &#x000a;pred doNothing{&#x000a;&#x0009;ThisSide&apos; = ThisSide&#x000a;&#x0009;OtherSide&apos; = OtherSide&#x000a;}&#x000a;&#x000a;fact validTraces{&#x000a;&#x0009;init[ThisSide, OtherSide]&#x000a;&#x0009;always{&#x000a;&#x0009;&#x0009;// force progress something or nothing crosses but farmer has to move back and forth&#x000a;&#x0009;&#x0009;(OtherSide != Item) =&gt;(crossOtherToThis[Goat] or crossThisToOther[none] or crossThisToOther[Goat] or crossOtherToThis[none] or crossThisToOther[Wolf] or crossOtherToThis[Wolf]  or crossThisToOther[Cabbage] or crossOtherToThis[Cabbage] )&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;// only when it is true that they are on the otehr side can they do nothing afterwards when everyone is on the other side&#x000a;&#x0009;&#x0009;(OtherSide = Item) =&gt; doNothing&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;--predicates----&#x000a;&#x000a;//cross forwards&#x000a;pred crossThisToOther(i: Item){&#x000a;&#x0009;//preconditions&#x000a;&#x0009;Farmer in ThisSide&#x000a;&#x0009;i in ThisSide&#x000a;&#x0009;&#x000a;&#x0009;//actions being done&#x000a;&#x0009;ThisSide&apos; = ThisSide - Farmer - i&#x000a;&#x0009;OtherSide&apos; = OtherSide + Farmer + i&#x000a;}&#x000a;&#x000a;//cross backwards&#x000a;pred crossOtherToThis(i: Item){&#x000a;&#x0009;//preconditions&#x000a;&#x0009;Farmer in OtherSide&#x000a;&#x0009;i in OtherSide&#x000a;&#x000a;&#x0009;//actions being done&#x000a;&#x0009;ThisSide&apos; = ThisSide + Farmer + i&#x000a;&#x0009;OtherSide&apos; = OtherSide - Farmer - i&#x000a;}&#x000a;&#x000a;&#x000a;//cannot have the goat be alone with cabbage and the goat cannot bewith the wolf&#x000a;fact rules{&#x000a;&#x0009;always{&#x000a;&#x0009;&#x0009;// goat can&apos;t be alone with cabbage&#x000a;&#x0009;&#x0009;(Farmer in ThisSide and Goat in OtherSide) =&gt; not(Cabbage in OtherSide)&#x000a;&#x0009;&#x0009;(Farmer in OtherSide and Goat in ThisSide) =&gt; not(Cabbage in ThisSide)&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;//goat acna&apos;t be with wofl&#x000a;&#x0009;&#x0009;(Farmer in ThisSide and Goat in OtherSide) =&gt; not(Wolf in OtherSide)&#x000a;&#x0009;&#x0009;(Farmer in OtherSide and Goat in ThisSide) =&gt; not(Wolf in ThisSide)&#x000a;&#x0009;&#x0009;}&#x000a;}&#x000a;&#x000a;run{} for 7&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;"/>

<source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

</alloy>
